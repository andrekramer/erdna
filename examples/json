curl --data-raw '
;;; test with:
;;; python3 test.py examples/json false
(json-parse "{ \"a\": \"abc123\", \"x\": 2.1, \"bool\": true}")
' localhost:8080
((a "abc123") (x 2.1) (bool #t))

curl --data-raw '
(json-parse "{ \"a\": \"abc\",  
 \"point\": { \"x\": 1, \"y\": 2, \"z\": 3 }}")
' localhost:8080
((a "abc") (point ((x 1) (y 2) (z 3))))

curl --data-raw '
(json-parse "{ 
 \"point\": { \"x\": 1, \"y\": 2, \"properties\": { \"colour\": \"blue\" }, \"z\": 3 },
 \"doc\": \"point with colour\"
}")
' localhost:8080
((point ((x 1) (y 2) (properties ((colour "blue"))) (z 3))) (doc "point with colour"))

curl --data-raw '
(define json (json-parse "{ 
\"name\":\"Jane\",
\"age\":30,
\"partner\": {
   \"name\": \"John\",
   \"age\": 28,
   \"relationship\": \"married\" 
},
\"horses\":[\"Trigger\", \"Poppy\", \"Sunny\"]
}"))
' localhost:8080
((name "Jane") (age 30) (partner ((name "John") (age 28) (relationship "married"))) (horses ((0 "Trigger") (1 "Poppy") (2 "Sunny"))))

curl --data "
(define (json-get prop json)
  (cond ((null? json) '())
        ((equal? prop (caar json)) (car (cdar json)))
        (else (json-get prop (cdr json)))))

(json-get 'age json)
(json-get 'name (json-get 'partner json))
" localhost:8080
λ
30
"John"

curl --data "
(define (json-find prop json) 
  (letrec 
    ((result '())
     (define (find prop json) 
       (define (check-prop pair)
         (cond ((null? pair) #f)
               ((not (list? pair)) #f)
               ((equal? (car pair) prop) (set! result (cadr pair)))
               ((list? (car pair)) (find prop (car pair)))
               (else #f)))
       (define (check-value pair) 
         (cond ((null? pair) #f)
               ((not (list? pair)) #f)
               (else (if (list? (cdr pair)) (find prop (cdr pair)) #f))))
       (cond 
         ((null? json) #f)
         ((check-prop json) #t)
         ((check-prop (car json)) #t)
         ((check-value (car json)) #t)
         (else (find prop (cdr json))))))

    (find prop json)
    result))

(json-find 'relationship json)
(json-find 'age json)
(json-find 'salary json)
" localhost:8080

λ
"married"
30
()

curl --data-raw '
(json-find (string->symbol "0") json)
' localhost:8080
"Trigger"

curl --data-raw '
(define json (json-parse "{ 
  \"candidates\": [
    {
      \"content\": {
        \"parts\": [
          {
            \"text\": \"Yes.  Since Esland (Democracy) is next to Middland, and Wesland (Communist) is next to Middland, regardless of whether Middland is a democracy or communist country, there will always be a democracy next to a communist country.\\n\"
          }
        ],
        \"role\": \"model\"
      },
      \"finishReason\": \"STOP\",
      \"avgLogprobs\": -0.069065033305775042
    }
  ],
  \"usageMetadata\": {
    \"promptTokenCount\": 98,
    \"candidatesTokenCount\": 55,
    \"totalTokenCount\": 153
  },
  \"modelVersion\": \"gemini-1.5-flash-latest\"
}"))
' localhost:8080

((candidates ((0 ((content ((parts ((0 ((text "Yes.  Since Esland (Democracy) is next to Middland, and Wesland (Communist) is next to Middland, regardless of whether Middland is a democracy or communist country, there will always be a democracy next to a communist country.\n"))))) (role "model"))) (finishReason "STOP") (avgLogprobs -0.06906503330577504))))) (usageMetadata ((promptTokenCount 98) (candidatesTokenCount 55) (totalTokenCount 153))) (modelVersion "gemini-1.5-flash-latest"))

curl --data "
(json-find 'text json)
" localhost:8080
"Yes.  Since Esland (Democracy) is next to Middland, and Wesland (Communist) is next to Middland, regardless of whether Middland is a democracy or communist country, there will always be a democracy next to a communist country.\n"
