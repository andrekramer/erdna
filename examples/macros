
curl  --data-raw "
(define-rewriter or2
   (lambda (expr)
      (let ((a (cadr expr))
            (b (caddr expr)))
           (cons 'let 
                 (cons 
                   (list (list 'temp a)) 
                   (list (append '(if temp temp) (list b)))))
      )))
(define (repeat n b) (if (equal? n 0) (or2 #f b) (repeat (- n 1) (not b))))
(repeat 0 #t)
(repeat 1 #t)
(repeat 0 #f)
(repeat 1 #f)
(let ((temp1 #f) (temp2 #f)) (or2 temp1 temp2))
(let ((temp1 #f) (temp2 #t)) (or2 temp1 temp2))
(let ((temp1 #t) (temp2 #f)) (or2 temp1 temp2))
(let ((temp1 #t) (temp2 #t)) (or2 temp1 temp2))
" localhost:8080

()
Î»
#t
#f
#f
#t
#f
#t
#t
#t

# xor using lists and quotes

curl  --data-raw "
(define-rewriter xor
   (lambda (expr)
      (let ((a (cadr expr))
            (b (caddr expr)))
           (cons 'let (list 
                        (list (list 'temp a) (list 'temp2 b))
                        (list 'if 'temp 
                          (list 'if 'temp2 #f 'temp) 
                          (list 'if 'temp2 'temp2 #f)))))))
(xor #f #f)
(xor #t #f)
(xor #f #t)
(xor #t #t)
" localhost:8080

()
#f
#t
#t
#f

# xor using quasiquote and unquote

export bq='`';curl  --data-raw "
(define-rewriter xor
   (lambda (expr)
      (let ((a (cadr expr))
            (b (caddr expr)))
        $bq(let ((temp ,a)  
                 (temp2 ,b))  
                (if temp (if temp2 #f temp) (if temp2 temp2 #f))))) )
(xor #f #f)
(xor #t #f)
(xor #f #t)
(xor #t #t)
" localhost:8080

expression
#f
#t
#t
#f

export bq='`';curl  --data-raw "
(define-rewriter swap
   (lambda (expr)
      (let ((temp (unquote (cadr expr))))
        (let ((a (cadr expr))
              (b (caddr expr)))
             $bq(begin (set! ,a ,b) (set! ,b ,temp))))))
(define x 1)
(define y 2)
(swap x y)
x
y
" localhost:8080
()
1
2
2
2
1

