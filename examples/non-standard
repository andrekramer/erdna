curl --data '
(string-length "abcdefg")
(slice "abcdefgh" 3 5)
(slice "123abcdefgh" 4)
(concat "abc " 100.001 "\ndef\n" "123" #f)
(index-of "World" "Hello World!")
' localhost:8080  
7
de
bcdefgh
abc 100.001
def
123false
6

curl --data "(type-of 'a)" localhost:8080  
0

curl --data "(div-mod 13 3)" localhost:8080  
(4 . 1)

curl --data "(print '(+ 1 2.0 (a . 1) (a b c (d e)) \"ddd\"))" localhost:8080
(+ 1 2 (a . 1) (a b c (d e)) "ddd")

curl --data "(eval (read \"(+ 1 2 3 4 5)\") (lambda () ()))"  localhost:8080  
15   

curl --data "(eval (read \"(+ 1 2) '(a b) (* 1 2)\") (lambda () ()))"  localhost:8080
2  

curl --data "(sleep-promise 2000)" localhost:8080
curl --data "(resolve (sleep-promise 2000))" localhost:8080
curl --data "
(define (test) 
  (define a (sleep-promise 2000)) 
  (+ 1 2) 
  (resolve a)) (test)" localhost:8080
# writes "done." after each sleep

curl --data "(eval (read \"(+ 1 2 3 4 5)\") (lambda () ()))"  localhost:8080
15

# In another console:
export PORT=8081;node index.js 

curl --data '(resolve (fetch-promise "http://localhost:8081" ""))' localhost:8080
erdna

curl --data '(resolve (fetch-promise "http://localhost:8081" "" "(+ 1 2 3)" ))' localhost:8080
"6\n"

curl --data "
(define (remote-promise url apikey exp) (fetch-promise url apikey (print exp)))
(resolve (remote-promise \"http://localhost:8081\" \"\" '(+ 1 2 3) ))
" localhost:8080
"6\n"

curl --data "
(define (remote-promise url apikey exp) (fetch-promise url apikey (print exp)))
(resolve (remote-promise \"http://localhost:8081\" \"\"
'(begin (define add1 (lambda (b) (+ 1 b))) (add1 7) )))
" localhost:8080
"8\n"

# Use api key XXX (can use different keys for each hop) 
export APIKEY=XXX; node --stack-size=1000000 index.js 
curl --data '(resolve (fetch-promise "http://localhost:8081" "XXX"))' localhost:8080

# read and eval the result from a remote promise:
curl --data "
(define (remote-promise url apikey exp) (fetch-promise url apikey (print exp)))
(eval (read 
   (resolve 
     (remote-promise \"http://localhost:8081\" \"\"
       '(letrec
          ((add1 (lambda (b) (+ 1 b))) 
           (x (add1 7))
           (y (add1 1)) )
          (quasiquote (+ ,x ,y 3))
      )))) 
      (lambda ()()))     
" localhost:8080
13

