curl --data '
(string-length "abcdefg")
(slice "abcdefgh" 3 5)
(slice "123abcdefgh" 4)
(concat "abc " 100.001 "\ndef\n" "123" #f)
(index-of "World" "Hello World!")
' localhost:8080  
7
de
bcdefgh
abc 100.001
def
123false
6

curl --data "(type-of 'a)" localhost:8080  
0

curl --data "(div-mod 13 3)" localhost:8080  
(4 . 1)

curl --data "(print '(+ 1 2.0 (a . 1) (a b c (d e)) \"ddd\"))" localhost:8080
(+ 1 2 (a . 1) (a b c (d e)) "ddd")

curl --data "(eval (read \"(+ 1 2 3 4 5)\") (lambda () ()))"  localhost:8080  
15   

curl --data "(eval (read \"(+ 1 2) '(a b) (* 1 2)\") (lambda () ()))"  localhost:8080
2  

curl --data "(eval (read \"(+ 1 2 3 4 5)\") (lambda () ()))"  localhost:8080
15

# make an object called obj1 with no or default base
curl --data "(make obj1 ())"  localhost:8080
object

# make an object called obj2 with obj1 as base
curl --data "(make obj1 ())(make obj2 obj1)"  localhost:8080
object
object

# make an object called obj1 with fields x and y initialized to 1 and 2 respetively
curl --data "(make obj1 () (x 1) (y 2))"  localhost:8080
object

# make an object obj2 that extends obj1 with a z field initialized to 3
curl --data "(make obj1 () (x 1) (y 2))(make obj2 obj1 (z 3))"  localhost:8080
object
object

curl --data "(make obj1 () (x 1) (y 2)) (@ obj1 x) (@ obj1 y) (@ obj1 z)"  localhost:8080
object
1
2

@ field not found 

curl --data "(make obj1 () (x 1) (y 2))(make obj2 obj1 (z 3)) (@ obj2 z) (@ obj2 y) (@ obj2 x)"  localhost:8080
object
object
3
2
1

curl --data "(make obj1 () (x 1) (y 2)) (@! obj1 x -1) (@! obj1 y -2) (@ obj1 x) (@ obj1 y)"  localhost:8080
object
1
2
-1
-2

curl --data "(make obj1 () (x 1) (y 2))(make obj2 obj1 (z 3)) (@! obj2 x -1) (@! obj2 z -3) (@ obj2 z) (@ obj2 y) (@ obj2 x)"  localhost:8080
curl --data "(make obj1 () (x 1) (y 2))(make obj2 obj1 (z 3)) (@! obj2 x -1) (@! obj2 z -3) (@ obj2 z) (@ obj2 y) (@ obj2 x)"  localhost:8080
object
object
1
3
-3
2
-1

