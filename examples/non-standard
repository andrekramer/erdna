curl --data '
(string-length "abcdefg")
(slice "abcdefgh" 3 5)
(slice "123abcdefgh" 4)
(concat "abc " 100.001 "\ndef\n" "123" #f)
(index-of "World" "Hello World!")
' localhost:8080  
7
de
bcdefgh
abc 100.001
def
123false
6

curl --data "(sqrt 2)" localhost:8080
1.4142135623730951

curl --data "(floor (sqrt 2))" localhost:8080
1

curl --data "(random)" localhost:8080
0 <= result <= 1

curl --data "(type-of 'a)" localhost:8080  
0

curl --data "(div-mod 13 3)" localhost:8080  
(4 . 1)

curl --data "(print '(+ 1 2.0 (a . 1) (a b c (d e)) \"ddd\"))" localhost:8080
(+ 1 2 (a . 1) (a b c (d e)) "ddd")

curl --data "(eval (read \"(+ 1 2 3 4 5)\") (lambda () ()))"  localhost:8080  
15   

curl --data "(eval (read \"(+ 1 2) '(a b) (* 1 2)\") (lambda () ()))"  localhost:8080
2  

curl --data "(eval (read \"(+ 1 2 3 4 5)\") (lambda () ()))"  localhost:8080
15

curl --data "
(define erdna (resolve (read-file-promise \"file3\"))) 
(eval (read erdna) (lambda () ())) test
"  localhost:8080

"(define test \"this is a test\")\n(display \"echo\")\n"

"this is a test"

curl --data "
(define (load file) (eval (read (resolve (read-file-promise file))) '()) )
(load \"file4\")
(triple 4)
"  localhost:8080
12

curl --data "(string->symbol \"abc\");" localhost:8080
abc

curl --data "(symbol->string 'abc);" localhost:8080
"abc"

curl --data "(error->string '())" localhost:8080  
()

curl --data "(error->string (eval '(xxx) '()))" localhost:8080    
"Error: Unbound variable xxx"

# using unquote to force an eval
curl  --data-raw " (unquote '(+ 1 2)) " localhost:8080
3
curl  --data-raw "(define a 1) (unquote 'a) " localhost:8080
1

