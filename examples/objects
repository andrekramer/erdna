
# make an object called point1 with no or default base
curl --data "(make point1 ())"  localhost:8080
object

# make an object called point2 with point1 as base
curl --data "(make point1 ())(make point2 point1)"  localhost:8080
object
object

# make an object called point1 with fields x and y initialized to 1 and 2 respetively
curl --data "(make point1 () (x 1) (y 2))"  localhost:8080
object

# make an object point2 that extends point1 with a z field initialized to 3
curl --data "(make point1 () (x 1) (y 2))(make point2 point1 (z 3))"  localhost:8080
object
object

curl --data "(make point1 () (x 1) (y 2)) (@ point1 x) (@ point1 y) (@ point1 z)"  localhost:8080
object
1
2

@ field not found 

curl --data "(make point1 () (x 1) (y 2))(make point2 point1 (z 3)) 
(@ point2 z) (@ point2 y) (@ point2 x)"  localhost:8080
object
object
3
2
1

curl --data "(make point1 () (x 1) (y 2)) 
(@! point1 x -1) (@! point1 y -2) (@ point1 x) (@ point1 y)"  localhost:8080
object
1
2
-1
-2

curl --data "(make point1 () (x 1) (y 2))(make point2 point1 (z 3)) 
(@! point2 x -1) (@! point2 z -3) (@ point2 z) (@ point2 y) (@ point2 x)"  localhost:8080
object
object
1
3
-3
2
-1

curl --data "
;; some maths defs
(define (abs x) (if (< x 0) (- 0 x) x))
(define (newton's-method x guess error)
   (let ((xn (/ (+ x (/ guess x)) 2)))
     (display xn)
     (cond ((< (abs (- x xn)) error) xn)
           (else (newton's-method xn guess error)))
   )
)
(define (sqrt n) (newton's-method (+ n 0.000001) (+ n 0.000001) 0.000001))
;; try some maths examples
(sqrt 2)
(define (square x) (* x x))
(sqrt (+ (square 1) (square 2)))
(sqrt (+ (square 1) (square 2) (square 3)))
;; define a point in 2D with a length method
(make point1 () 
  (x 1) 
  (y 2) 
  (length (lambda (self) 
            (sqrt (+ (square (@ self x)) (square (@ self y))))))) 
;; do some gets on point1
(@ point1 x) (@ point1 y) 
((@ point1 length) point1)
;; define a point in 3D that extends the 2D point with a z dimension and overrides the 2D length method
(make point2 point1 
  (z 3) 
  (length (lambda (self) 
            (sqrt (+ (square (@ self x)) (square (@ self y)) (square (@ self z))))))) 
;; do some gets on second point
(@ point2 x) (@ point2 y) (@ point2 z) 
((@ point2 length) point2)
;; define a colored 2D point
"  localhost:8080

λ
λ
λ
1.4142139159264415
λ
2.2360682011067645
3.7416575204045643
undefined
1
2
2.2360682011067645
undefined
1
2
3
3.7416575204045643


# next examples build on previously defined procs and point1

curl --data "
;; define a colored 2D point
(make point3 point1 (colour 'red))
(@ point3 colour)
(@ (@ point3 super) y)
(@! point3 y 1)
((@ point3 length) point3)
(@ (@ point3 super) y)
" localhost:8080

object
red
2
2
1.4142139159264415
1

# Alternative syntax for "sending messages" to an object with first arg set to self

curl --data "
((@ point1 length) point1)
(define (send obj method . args)
  (apply (@ obj 'method) (cons obj args))
)
(send point1 'length)
" localhost:8080

1.4142139159264415
λ
1.4142139159264415


curl --data "
(make point4 () (x 1) (y 1))
(make point5 () (x 0) (y 0)
  (distance (lambda (self other) 
     (sqrt (+ 
       (square (- (@ other x) (@ self x)))
       (square (- (@ other y) (@ self y)))))))
  (distance-to-x-y (lambda (self x y) 
     (sqrt (+ 
       (square (- x (@ self x)))
       (square (- y (@ self y)))))))
)
((@ point5 distance) point5 point4)
(send point5 'distance point4)
(send point5 'distance point5)
(send point5 'distance-to-x-y 1 1)
" localhost:8080

object
object
1.4142139159264415
1.4142139159264415
0.0010000001533016628
1.4142139159264415

