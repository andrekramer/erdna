curl --data "
(define (filter f l)
  (if (null? l) '()
    (let ((v (car l)) (r (cdr l)))
       (cond ((f v) (cons v (filter f r)))
             (else (filter f r ))))))
(filter (lambda (a) (< 5 a)) '(1 8 3 4 5 6 7 2 8 9))
" localhost:8080
λ
(8 6 7 8 9)

curl --data "
;;; if we don't mind the result being reversed (or can apply O(n) reverse) we can use tail recursion.
(define (filter2 f l) 
  (define (fil f l l2) 
    (cond ((equal? l '()) l2)
          ((f (car l))  (fil f (cdr l) (cons (car l) l2)))
          (else (fil f (cdr l) l2))))
  (fil f l '()))
(filter2 (lambda (a) (< 5 a)) '(1 8 3 4 5 6 7 2 8 9))
" localhost:8080
λ
(9 8 7 6 8)

curl --data "
(define (filter2 f lst)
  (define (iter lst result)
    (cond
      ((null? lst) result)
      ((f (car lst)) (iter (cdr lst)
                           (cons (car lst) result)))
      (else (iter (cdr lst)
                  result))))
  (iter lst '()))
(filter2 (lambda (a) (< 5 a)) '(1 8 3 4 5 6 7 2 8 9))
" localhost:8080
λ
(9 8 7 6 8)

curl --data "
(define (quick-sort xs)
   (if (null? xs) '()
      (let ((x (car xs))
            (xs' (cdr xs)))
         (append (quick-sort
                    (filter2 (lambda (x')
                               (< x' x))
                            xs'))
                 (list x)
                 (quick-sort
                    (filter2 (lambda (x')
                               (not (< x' x)))
                            xs'))))))
(quick-sort '(3 5 4 7 1 9 2 12 4 8 1.1 0 -1 2))
" localhost:8080
λ
(-1 0 1 1.1 2 2 3 4 4 5 7 8 9 12)

curl --data "
   (define (make-integer-list count l) 
     (cond 
       ((equal? count 0) l)
       (else (make-integer-list (- count 1) (cons count l)))))
   (define list-to-sort (reverse (make-integer-list 100 '())))
" localhost:8080

curl --data "
(quick-sort list-to-sort)
" localhost:8080

curl --data "
(define (merge l m)
  (if (null? l) m
    (if (null? m) l
      (if (< (car l) (car m))
        (cons (car l) (merge (cdr l) m))
        (cons (car m) (merge (cdr m) l))))))

(define (left l)
  (if (null? l) '()
    (if (null? (cdr l)) (list (car l))
      (cons (car l) (left (cddr l))))))

(define (right l)
  (if (null? l) '()
    (if (null? (cdr l)) '()
      (cons (cadr l) (right (cddr l))))))

(define (split l)
  (cons (left l) (cons (right l) '())))

(define (merge-sort l)
  (if (null? l) l
    (if (null? (cdr l)) l
      (merge (merge-sort (car (split l)))
             (merge-sort (cadr (split l)))))))
(merge-sort '(6 2 3 5 4 1 8 7 9 0))
" localhost:8080
λ
(100 99 98 97 96 95 94 93 92 91 90 89 88 87 86 85 84 83 82 81 80 79 78 77 76 75 74 73 72 71 70 69 68 67 66 65 64 63 62 61 60 59 58 57 56 55 54 53 52 51 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1)
(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100)
λ
λ
λ
λ
λ
(0 1 2 3 4 5 6 7 8 9)

curl --data "
(merge-sort list-to-sort)
" localhost:8080

curl --data "
(define (merge2 l m)
  (if (null? l) m
    (if (null? m) l
      (if (< (car l) (car m))
        (cons (car l) (merge2 (cdr l) m))
        (cons (car m) (merge2 (cdr m) l))))))

(define (split2 l) 
  (define (sp l left right odd?)
    (if (null? l) 
      (cons left (cons right '()))
      (if odd?
         (sp (cdr l) (cons (car l) left) right #f)
         (sp (cdr l) left (cons (car l) right) #t))))
  (sp l '() '() #t))

(define (merge-sort2 l)
  (if (null? l) l
    (if (null? (cdr l)) l
      (merge2 (merge-sort2 (car (split2 l)))
             (merge-sort2 (cadr (split2 l)))))))
(merge-sort2 '(6 2 3 5 4 1 8 7 9 0))
" localhost:8080
(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100)
λ
λ
λ
(0 1 2 3 4 5 6 7 8 9)

curl --data "
(merge-sort2 list-to-sort)
" localhost:8080

curl --data "
(define (random-int max) (floor (* (random) max)))
(define (make-random-integer-list count l) 
  (cond 
    ((equal? count 0) l)
    (else (make-random-integer-list (- count 1) (cons (random-int 10000) l)))
))
(define random-list-to-sort (make-random-integer-list 10000 '()))
" localhost:8080

curl --data "
(quick-sort random-list-to-sort)
" localhost:8080

curl --data "
(merge-sort random-list-to-sort)
" localhost:8080

curl --data "
(merge-sort2 random-list-to-sort)
" localhost:8080
-- results are lenghty sorted lists

curl --data "
(define (min . l) 
  (define (min2 l m)
    (if (null? l) m 
      (min2 (cdr l) (letrec ((h (car l))) (if (< h m) h m)))))
  (min2 (cdr l) (car l)))
(min 4 5 2 7)
" localhost:8080
λ
2

curl --data "
(define (member? m l)
  (cond ((null? l) #f)
        ((equal? m (car l)) l) 
        (else (member? m (cdr l)))))
(member? 0 '(1 #t 2 3 (4 5)))
(member? 2 '(1 #t 2 3 (4 5)))
(define (beatle? person)
  (member? person '(john paul george ringo)))
(beatle? 'paul)
(beatle? 'elvis)
" localhost:8080
λ
#f
(2 3 (4 5))
λ
(paul george ringo)
#f

curl --data "
(define (map f l) 
  (if (null? l) '() (cons (f (car l)) (map f (cdr l)))))
(map (lambda (a) (+ a 1)) '(1 2 3 4 5))  
" localhost:8080
λ
(2 3 4 5 6)

curl --data "
;;; Scheme's standard map can apply a function to multiple lists. Here called map2:
(define (any-null? lists)
   (cond ((null? lists) #f)
          (else (if (null? (car lists)) #t (any-null? (cdr lists))))))
(define (firsts lists)
    (cond ((null? lists) '())
          (else (cons (car (car lists)) (firsts (cdr lists))))))
(define (rests lists)
    (cond ((null? lists) '())
          (else (cons (cdr (car lists)) (rests (cdr lists))))))
(define (map-over-lists f lists)
  (if (or (null? lists) (any-null? lists)) '() 
      (cons (apply f (firsts lists)) (map-over-lists f (rests lists)))))
(define (map2 f . lists) (map-over-lists f lists))

\"testing\"
(any-null? '((1 2 3) (1 2)))
(any-null? '((1 2) ()))
(any-null? '(1 2 3))
(any-null? '())
(firsts '((1 2 3) (1 2)))
(rests '((1 2 3) (1 2)))
(firsts '((1 2 3)))
(rests '((1 2 3)))
(map-over-lists (lambda (a) (+ a 1)) '((1 2 3 4 5)))  
(map-over-lists + '((1 2 3) (2 3 4 5)))  
\"map results\"
(map2 (lambda (a) (+ a 1)) '(1 2 3 4 5))  
(map2 (lambda (a) (+ a 1)) '() '(1 2))  
(map2 + '(1 2 3) '(2 3 4 5))  
(map2 * '(1 2 3 4) '(2 3 4 5) '(3 4 5 6))  

(define (transpose . lists) 
   (map-over-lists list lists))
(transpose '(1 2 3 4 5) '(6 7 8 9 0) '(a b c d e) '(u v x y w z))
" localhost:8080
λ
λ
λ
λ
λ
"testing"
#f
#t
#f
#f
(1 1)
((2 3) (2))
(1)
((2 3))
(2 3 4 5 6)
(3 5 7)
"map results"
(2 3 4 5 6)
()
(3 5 7)
(6 24 60 120)
λ
((1 6 a u) (2 7 b v) (3 8 c x) (4 9 d y) (5 0 e w))

curl --data "
(define (dot-product a b) (apply + (map2 * a b)))
(dot-product '(1 3 -5) '(4 -2 -1 ))
(dot-product '(1 3 -5) '(1 3 -5))
" localhost:8080
λ
3
35

curl --data "; reduce right associative aka foldr
(define (reduce fn l r)
  (if (null? l) r
      (fn (car l)
          (reduce fn (cdr l) r))))
(reduce * '(1 2 3 4 5) 1)
(reduce - '(100 20 30 5 40) 0)
" localhost:8080
λ
120
145

curl --data "; reduce left associative aka foldl
(define (reduce-left fn r l)
  (if (null? l) r
      (reduce-left fn (fn r (car l)) (cdr l))))
(reduce-left / 1.0  '(1 2 3 4 5))
(reduce-left - 0.0 '(100 20 30 5 40))
" localhost:8080
λ
0.008333333333333333
-195

curl --data "
(define (largest nums)
  (local [(define (bigger x y)
            (cond [(> x y) x]
                  [else y]))
          (define (helper nums)
            (cond [(null? (rest nums)) (first nums)]
                  [else (bigger (first nums) (helper (rest nums)))]))]
    (helper nums)))
(largest (list 5 15 12 13 14 11 3 9 8 7 6 16 4 10 2 1))
" localhost:8080
λ
16

curl --data "
(define curry
 (lambda (f)
   (lambda (x)
     (lambda (y) (f x y)))))
(((curry +) 1) 2)
" localhost:8080
λ
3

curl --data "
(define o (lambda (f g)
 (lambda (x) (f (g x)))))
(define (mod x y) (cdr (div-mod x y)))
(define (even? n) (equal? 0 (mod n 2)))
(define odd? (o not even?))
(odd? 1013)
(even? 222)
(odd? 1018)
(even? 111)
" localhost:8080
λ
λ
λ
λ
#t
#t
#f
#f

curl --data "
(define (all? p? xs)
 (if (null? xs)
  #t
  (and (p? (car xs))
    (all? p? (cdr xs)))))
(all? even? '(2 4 6 8))
(all? odd? '(1 3 4 7 9))
" localhost:8080
λ
#t
#f

curl --data "
(define (any? p? xs)
 (if (null? xs)
  #f
  (or (p? (car xs))
    (any? p? (cdr xs)))))
(any? even? '(1 3 6 7))
(any? odd? '(2 20 200))
(define contains?
 (lambda (ele lis)
  (any? (lambda (x) (equal? x ele))
     lis)))
(contains? 'a '(c b a))
" localhost:8080
λ
#t
#f
λ
#t

curl --data "
(define sum 
 (lambda (f lower upper)
  (if (> lower upper)
    0
    (+ (f lower) (sum f (+ 1 lower) upper)))))
(sum (lambda (x) x) 1 10)
" localhost:8080
λ
55

curl --data "
(define (for-each f lis)
   (cond 
     ((null? lis) '())
     (else (f (car lis)) (for-each f (cdr lis)))))
(for-each (lambda (x) (display (* x 2))) '(1 2 3 4))
" localhost:8080
λ
()

curl --data "
(define (every f l) 
   (cond ((null? l) #t)
         ((f (car l)) (every f (cdr l)))
         (else #f)))
(define (some f l) 
   (cond ((null? l) #f)
         ((f (car l)) #t) 
         (else (some f (cdr l)))))

;; (define (mod x y) (cdr (div-mod x y)))
;; (define (even? n) (equal? 0 (mod n 2)))
(every even? '(2 4 10))  
(every even? '())  
(every even? '(2 3 4))  
(some even? '())
(some even? '(1 3 5))
(some even? '(1 2 3 4))
" localhost:8080
λ
λ
#t
#t
#f
#f
#f
#t

curl --data "
(define (set-difference l l2) 
   (define (diff l l2 d) 
      (cond ((null? l) d)
            ((member? (car l) l2) (diff (cdr l) l2 d))
            (else (diff (cdr l) l2 (cons (car l) d)))))
   (diff l l2 '())) 
(define (union l l2)
 (append l (set-difference l2 l)))

(set-difference '(1 2 3 4 7) '(4 5 6 2))
(set-difference '(1 2 3) '(4 5))
(set-difference '(1 2) '())
(set-difference '(1 2) '(1 2))
(union '(1 2 3 4 7) '(4 5 6 2))
(union '(1 2 3) '(4 5))
(union '(1 2) '())
(union '(1 2) '(1 2))
" localhost:8080
λ
λ
(7 3 1)
(3 2 1)
(2 1)
()
(1 2 3 4 7 6 5)
(1 2 3 5 4)
(1 2)
(1 2)

curl --data "
(define (find-all f l)
   (define (find-all2 f l r)
     (cond ((null? l) r) 
           ((f (car l)) (find-all2 f (cdr l) (cons (car l) r)))
           (else (find-all2 f (cdr l) r))))
   (find-all2 f l '()))
(find-all even? '(1 2 3 4 5 6 7 8 9 0))
(find-all even? '())
(find-all even? '(1 33 55 77))
(find-all even? '(20 400))
" localhost:8080
λ
(0 8 6 4 2)
()
()
(400 20)


curl --data "
(define (subset l ll) 
  (cond ((null? l) #t)
        ((member? (car l) ll) (subset (cdr l) ll))
        (else #f)))
(subset '(1 2) '(2 3 4))
(subset '(1 2) '(2 3 1 4))
(subset '(1 2) '(2 3 4))
(subset '(1) '(3 2 1))
" localhost:8080

λ
#f
#t
#f
#t

curl --data "
(define (flatten1 l)
  (cond 
    ((null? l) '())
    ((list? (car l)) (append (flatten1 (car l)) (flatten1 (cdr l))))
    (else (cons (car l) (flatten1 (cdr l))))))

(flatten1 '(1 2 (3 4) (5 (6) (7 (8 9)))))
(flatten1 '())
(flatten1 '(((3))))
(flatten1 '((a (b (c)))))
(flatten1 '(1 2 3))
(flatten1 '(1))
(flatten1 '(1 (2) 3))
" localhost:8080
λ
(1 2 3 4 5 6 7 8 9)
()
(3)
(a b c)
(1 2 3)
(1)
(1 2 3)

curl --data "
(define (flatten l)
  (define (flat l r)
    (cond 
      ((null? l) r)
      ((list? l) (flat (car l) (flat (cdr l) r)))
      (else (cons l r))))
  (flat l '()))
  
(flatten '(1 2 (3 4) (5 (6) (7 (8 9)))))
(flatten '())
(flatten '(((3))))
(flatten '((a (b (c)))))
(flatten '(1 2 3))
(flatten '(1))
(flatten '(1 (2) 3))
" localhost:8080
λ
(1 2 3 4 5 6 7 8 9)
()
(3)
(a b c)
(1 2 3)
(1)
(1 2 3)

