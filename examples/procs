curl --data-raw "
(define (filter f l) 
  (define (fil f l l2) 
    (cond ((equal? l '()) l2)
          ((f (car l))  (fil f (cdr l) (cons (car l) l2)) )
          (else  (fil f (cdr l) l2))))
  (fil f l '())
)
(filter (lambda (a) (< 5 a)) '(1 8 3 4 5 6 7 2 8 9))
" localhost:8080
 (9 8 7 6 8)

curl --data-raw "
(define (quicksort xs)
   (if (null? xs) '()
      (let ((x (car xs))
            (xs' (cdr xs)) )
         (append (quicksort
                    (filter (lambda (x')
                               (< x' x) )
                            xs'))
                 (list x)
                 (quicksort
                    (filter (lambda (x')
                               (not (< x' x)) )
                            xs'))))))
(quicksort '(3 5 4 7 1 9 2 12 4 8 1.1 0 -1 2))
" localhost:8080
(-1 0 1 1.1 2 2 3 4 4 5 7 8 9 12)

curl --data-raw "
   (define (make count l) 
     (cond 
       ((equal? count 0) l)
       (else (make (- count 1) (cons count l)))
   ))
   (define list-to-sort (reverse (make 1000 '())))
" localhost:8080

curl --data-raw "(quicksort list-to-sort)" localhost:8080

To increase stack size use, e.g.:
node --stack-size=1000000 index.js 

curl --data-raw "
(define (min . l) 
  (define (min2 l m)
    (if (null? l) m 
      (min2 (cdr l) (letrec ((h (car l))) (if (< h m) h m ))))
  )
  (min2 (cdr l) (car l))
)
(min 4 5 2 7)
" localhost:8080
2

curl --data-raw "
(define (member m l)
  (cond ((null? l) #f)
        ((equal? m (car l)) l) 
        (else (member m (cdr l)))
  )
)
(member 0 '(1 #t 2 3 (4 5)))
(member 2 '(1 #t 2 3 (4 5)))
" localhost:8080
false
(2 3 (4 5))

curl --data-raw "
(define (map f l) 
  (if (null? l) '() (cons (f (car l)) (map f (cdr l))))
)
(map (lambda (a) (+ a 1)) '(1 2 3 4 5))  
" localhost:8080
(2 3 4 5 6)

curl --data-raw "; reduce right associative
(define (reduce fn l r)
  (if (null? l) r
      (fn (car l)
          (reduce fn (cdr l) r))))
(reduce * '(1 2 3 4 5) 1)
(reduce - '(100 20 30 5 40) 0)
" localhost:8080
120
145

curl --data-raw "; reduce left associative
(define (reduce2 fn r l)
  (if (null? l) r
      (reduce2 fn (fn r (car l)) (cdr l))))
(reduce2 / 1.0  '(1 2 3 4 5))
(reduce2 - 0.0 '(100 20 30 5 40))
" localhost:8080
0.008333333333333333
-195

curl --data-raw "
(define (largest nums)
  (local [(define (bigger x y)
            (cond [(> x y) x]
                  [else y]))
          (define (helper nums)
            (cond [(null? (rest nums)) (first nums)]
                  [(cons (rest nums))
                   (bigger (first nums) (helper (rest nums)))]))]
    (helper nums)))
(largest (list 5 15 12 13 14 11 3 9 8 7 6 16 4 10 2 1))
" localhost:8080
16
