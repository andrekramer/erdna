curl --data-raw "
(define (filter f l) 
  (define (fil f l l2) 
    (cond ((equal? l '()) l2)
          ((f (car l))  (fil f (cdr l) (cons (car l) l2)) )
          (else (fil f (cdr l) l2))))
  (fil f l '()))
(filter (lambda (a) (< 5 a)) '(1 8 3 4 5 6 7 2 8 9))
" localhost:8080
 (9 8 7 6 8)

# if we don't mind the result being reversed (or can apply O(n) reverse) we can use tail recursion.
curl --data-raw "
(define (filter2 f lst)
  (define (iter lst result)
    (cond
      ((null? lst) result)
      ((f (car lst)) (iter (cdr lst)
                           (cons (car lst) result)))
      (else (iter (cdr lst)
                  result))))
  (iter lst '()))
(filter2 (lambda (a) (< 5 a)) '(1 8 3 4 5 6 7 2 8 9))
" localhost:8080

curl --data-raw "
(define (quick-sort xs)
   (if (null? xs) '()
      (let ((x (car xs))
            (xs' (cdr xs)) )
         (append (quick-sort
                    (filter2 (lambda (x')
                               (< x' x) )
                            xs'))
                 (list x)
                 (quick-sort
                    (filter2 (lambda (x')
                               (not (< x' x)) )
                            xs'))))))
(quick-sort '(3 5 4 7 1 9 2 12 4 8 1.1 0 -1 2))
" localhost:8080
(-1 0 1 1.1 2 2 3 4 4 5 7 8 9 12)

curl --data-raw "
   (define (make-integer-list count l) 
     (cond 
       ((equal? count 0) l)
       (else (make-integer-list (- count 1) (cons count l)))
   ))
   (define list-to-sort (reverse (make-integer-list 100 '())))
" localhost:8080

curl --data-raw "(quick-sort list-to-sort)" localhost:8080

curl --data-raw "
(define (merge l m)
  (if (null? l) m
    (if (null? m) l
      (if (< (car l) (car m))
        (cons (car l) (merge (cdr l) m))
        (cons (car m) (merge (cdr m) l))))))

(define (left l)
  (if (null? l) '()
    (if (null? (cdr l)) (list (car l))
      (cons (car l) (left (cddr l))))))

(define (right l)
  (if (null? l) '()
    (if (null? (cdr l)) '()
      (cons (cadr l) (right (cddr l))))))

(define (split l)
  (cons (left l) (cons (right l) '())))

(define (merge-sort l)
  (if (null? l) l
    (if (null? (cdr l)) l
      (merge (merge-sort (car (split l)))
             (merge-sort (cadr (split l)))))))
(merge-sort '(6 2 3 5 4 1 8 7 9 0))
" localhost:8080
(0 1 2 3 4 5 6 7 8 9)

curl --data-raw "(merge-sort list-to-sort)" localhost:8080

curl --data-raw "
(define (merge2 l m)
  (if (null? l) m
    (if (null? m) l
      (if (< (car l) (car m))
        (cons (car l) (merge2 (cdr l) m))
        (cons (car m) (merge2 (cdr m) l))))))

(define (split2 l) 
  (define (sp l left right odd?)
    (if (null? l) 
      (cons left (cons right '()))
      (if odd?
         (sp (cdr l) (cons (car l) left) right #f)
         (sp (cdr l) left (cons (car l) right) #t)
      )))
  (sp l '() '() #t))

(define (merge-sort2 l)
  (if (null? l) l
    (if (null? (cdr l)) l
      (merge2 (merge-sort2 (car (split2 l)))
             (merge-sort2 (cadr (split2 l)))))))
(merge-sort2 '(6 2 3 5 4 1 8 7 9 0))
" localhost:8080
(0 1 2 3 4 5 6 7 8 9)

curl --data-raw "(merge-sort2 list-to-sort)" localhost:8080

To increase stack size use, e.g.:
node --stack-size=1000000 index.js 

curl --data-raw "
(define (random-int max) (floor (* (random) max)))
(define (make-random-integer-list count l) 
  (cond 
    ((equal? count 0) l)
    (else (make-random-integer-list (- count 1) (cons (random-int 10000) l)))
))
(define random-list-to-sort (make-random-integer-list 10000 '()))
" localhost:8080

curl --data-raw "(quick-sort random-list-to-sort)" localhost:8080
curl --data-raw "(merge-sort random-list-to-sort)" localhost:8080
curl --data-raw "(merge-sort2 random-list-to-sort)" localhost:8080


curl --data-raw "
(define (min . l) 
  (define (min2 l m)
    (if (null? l) m 
      (min2 (cdr l) (letrec ((h (car l))) (if (< h m) h m ))))
  )
  (min2 (cdr l) (car l))
)
(min 4 5 2 7)
" localhost:8080
2

curl --data-raw "
(define (member? m l)
  (cond ((null? l) #f)
        ((equal? m (car l)) l) 
        (else (member? m (cdr l)))
  )
)
(member? 0 '(1 #t 2 3 (4 5)))
(member? 2 '(1 #t 2 3 (4 5)))
(define (beatle? person)
  (member? person '(john paul george ringo)))
(beatle? 'paul)
(beatle? 'elvis)
" localhost:8080
false
(2 3 (4 5))
(paul george ringo)
#f

curl --data-raw "
(define (map f l) 
  (if (null? l) '() (cons (f (car l)) (map f (cdr l)))))
(map (lambda (a) (+ a 1)) '(1 2 3 4 5))  
" localhost:8080
(2 3 4 5 6)

curl --data-raw "; reduce right associative aka foldr
(define (reduce fn l r)
  (if (null? l) r
      (fn (car l)
          (reduce fn (cdr l) r))))
(reduce * '(1 2 3 4 5) 1)
(reduce - '(100 20 30 5 40) 0)
" localhost:8080
120
145

curl --data-raw "; reduce left associative aka foldl
(define (reduce-left fn r l)
  (if (null? l) r
      (reduce-left fn (fn r (car l)) (cdr l))))
(reduce-left / 1.0  '(1 2 3 4 5))
(reduce-left - 0.0 '(100 20 30 5 40))
" localhost:8080
0.008333333333333333
-195

curl --data-raw "
(define (largest nums)
  (local [(define (bigger x y)
            (cond [(> x y) x]
                  [else y]))
          (define (helper nums)
            (cond [(null? (rest nums)) (first nums)]
                  [else (bigger (first nums) (helper (rest nums)))]))]
    (helper nums)))
(largest (list 5 15 12 13 14 11 3 9 8 7 6 16 4 10 2 1))
" localhost:8080
16

curl --data-raw "
(define curry
 (lambda (f)
   (lambda (x)
     (lambda (y) (f x y)))))
(((curry +) 1) 2)
" localhost:8080
λ
3

curl --data-raw "
(define o (lambda (f g)
 (lambda (x) (f (g x)))))
(define (mod x y) (cdr (div-mod x y)))
(define (even? n) (equal? 0 (mod n 2)))
(define odd? (o not even?))
(odd? 1013)
(even? 222)
(odd? 1018)
(even? 111)
" localhost:8080
#t
#t
#f
#f

curl --data-raw "
(define (all? p? xs)
 (if (null? xs)
  #t
  (and (p? (car xs))
    (all? p? (cdr xs)))))
(all? even? '(2 4 6 8))
(all? odd? '(1 3 4 7 9))
" localhost:8080
#t
#f

curl --data-raw "
(define (any? p? xs)
 (if (null? xs)
  #f
  (or (p? (car xs))
    (any? p? (cdr xs)))))
(any? even? '(1 3 6 7))
(any? odd? '(2 20 200))
(define contains?
 (lambda (ele lis)
  (any? (lambda (x) (equal? x ele))
     lis)))
(contains? 'a '(c b a ))
" localhost:8080
λ
#t
#f
λ
#t

curl --data-raw "
(define sum 
 (lambda (f lower upper)
  (if (> lower upper)
    0
    (+ (f lower) (sum f (+ 1 lower) upper)))))
(sum (lambda (x) x) 1 10)
" localhost:8080
55

curl --data-raw "
(define (for-each f lis)
   (cond 
     ((null? lis) '())
     (else (f (car lis)) (for-each f (cdr lis)))))
(for-each (lambda (x) (display (* x 2))) '(1 2 3 4))
" localhost:8080
()
