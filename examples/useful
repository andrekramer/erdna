curl --data "
(define (list-ref pos l) 
  (cond ((< pos 0) (error \"list-ref index < 0\"))
        ((null? l) (error \"list-ref list too short\"))
        ((equal? pos 0) (car l))
        (else (list-ref (- pos 1) (cdr l)))))

(define t '(1 2 3 4))
(list-ref 0 t)
(list-ref 1 t)
(list-ref 2 t)
(list-ref 3 t)
;; (list-ref 4 t)
(list-ref 0 '(a . b))
;; (list-ref 1 '())
;; (list-ref -1 t)

(define (list-tail pos l) 
  (cond ((< pos 0) (error \"list-tail index < 0\"))
        ((null? l) (error \"list-tail list too short\"))
        ((equal? pos 0) (cdr l))
        (else (list-tail (- pos 1) (cdr l)))))

(list-tail 0 t)
(list-tail 1 t)
(list-tail 2 t)
(list-tail 3 t)
;; (list-tail 4 t)
(list-tail 0 '(a . b))
;; (list-tail 1 '())
(list-tail -1 t)
" localhost:8080
λ
(1 2 3 4)
1
2
3
4
a
λ
(2 3 4)
(3 4)
(4)
()
b

list-tail index < 0         

curl --data "
(define (random-int max) (floor (* (random) max)))
(define (one-of l) 
  (list-ref (random-int (length l)) l))

;; simulate throw a die
(one-of '(1 2 3 4 5 6))
" localhost:8080
some number 1 to 6

curl --data "
(define (last l) 
  (cond ((null? l) (error \"can't get last of empty list\"))
        ((null? (cdr l)) (car l))
        (else (last (cdr l)))))
(last '(1 2 3 4))
(last '(1 2 3))
(last '(1 2))
(last '(1))
;; (last '(a . b))
(last '())
" localhost:8080
λ
4
3
2
1

can't get last of empty list  

curl --data "
(define (mappend f l) (apply append (map f l)))

(define (self-and-double x) (list x (+ x x)))
(map self-and-double '(1 2 3 4))
(mappend self-and-double '(1 2 3 4))
" localhost:8080

λ
λ
((1 2) (2 4) (3 6) (4 8))
(1 2 2 4 3 6 4 8)

curl --data "
(define (funcall f . list) (apply f list))
(funcall append '(1 2) '(3 4) '(5 6 7 8 9))
(funcall + 1 2 3 4 5)
" localhost:8080
λ
(1 2 3 4 5 6 7 8 9)
15

curl --data "
(define (assoc obj l) 
  (if (null? l) #f 
    (let ((v (car l)))
       (if (equal? obj (car v)) v (assoc obj (cdr l))))))
(define e '((a 1) (b 2) (c 3)))
(assoc 'a e)
(assoc 'b e)
(assoc 'c e)
(assoc 'd e)
(assoc (list 'b) '(((a)) ((b)) ((c))))
(define p '((x . 1) (y . 2) (z . 3)))
(assoc 'y p)
" localhost:8080
λ
((a 1) (b 2) (c 3))
(a 1)
(b 2)
(c 3)
#f
((b))
((x . 1) (y . 2) (z . 3))
(y . 2)

curl --data "
(define (string-ref str i) (slice str i (+ i 1)))
(define s \"abcdef\")
(string-ref s 0)
(string-ref s 4)
(string-ref s 5)
(string-ref s 6)
" localhost:8080
λ
"abcdef"
"a"
"e"
"f"
""     

curl --data "
(number->string 102.345)
(string? (number->string 1))
" localhost:8080
"102.345"
#t

curl --data "
(string->symbol \"abc\")
" localhost:8080
abc

curl --data "
(symbol->string 'abc)
" localhost:8080
"abc"

curl --data "
;;; setCar! and setCdr! are mutators of lists and better avoided
(define a '(1 . 2)) 
(set-car! a 3) 
a
(define b '(1 2 3)) 
(set-car! b 0) 
b
(define c b)
(set-car! b '()) 
c
" localhost:8080
(1 . 2)
1
(3 . 2)
(1 2 3)
1
(0 2 3)
(0 2 3)
0
(() 2 3)

curl --data "
(define a '(1 . 2)) 
(set-cdr! a 3) 
a
(define b '(1 2 3)) 
(set-cdr! b '(4 5)) 
b
(define c b)
(set-cdr! b '()) 
c
" localhost:8080
(1 . 2)
2
(1 . 3)
(1 2 3)
(2 3)
(1 4 5)
(1 4 5)
(4 5)
(1)

curl --data "
(define (make-stack) 
  (letrec
    ((stack '()))
    (define (push value) (set! stack (cons value stack)))
    (define (pop) 
      (if (empty) 
        (error \"stack is empty\") 
        (let 
          ((top (car stack))) 
          (set! stack (cdr stack)) 
          top)))
    (define (peek) 
      (if (empty) 
        (error \"stack is empty\") 
        (car stack)))
    (define (empty) (null? stack))
    (lambda (op)
      (case op
        (('push) push)
        (('pop) pop)
        (('peek) peek)
        (('empty) empty)
        (else (error \"no such message for stacks\"))))))
(define stack (make-stack))
((stack 'push) 1)
((stack 'push) 2)
((stack 'push) 3)
((stack 'pop))
((stack 'pop))
((stack 'empty))
((stack 'pop))
((stack 'empty))
((stack 'push) \"a stack item\")
((stack 'peek))
((stack 'pop))
((stack 'pop))
" localhost:8080

λ
λ
()
(1)
(2 1)
3
2
#f
1
#t
()
"a stack item"
"a stack item"

stack is empty

curl --data "
(define (make-queue) 
  (letrec
    ((front '()) (rear '()))
    (define (flip) 
      (if (null? front) 
        (begin 
          (set! front (reverse rear)) 
          (set! rear '())
)))
    (define (enqueue value) (set! rear (cons value rear)))
    (define (dequeue) 
      (if (empty) 
        (error \"queue is empty\") 
        (begin 
          (flip)
          (let 
            ((item (car front))) 
            (set! front (cdr front)) 
            item))))
    (define (peek) 
      (if (empty) 
        (error \"queue is empty\") 
        (begin (flip) (car front))))
    (define (empty) (and (null? front) (null? rear)))
    (lambda (op)
      (case op
        (('enqueue) enqueue)
        (('dequeue) dequeue)
        (('peek) peek)
        (('empty) empty)
        (else (error \"no such message for queues\"))))))
(define queue (make-queue))
((queue 'enqueue) 1)
((queue 'enqueue) 2)
((queue 'enqueue) 3)
((queue 'dequeue))
((queue 'dequeue))
((queue 'empty))
((queue 'dequeue))
((queue 'empty))
((queue 'enqueue) \"a queue item\")
((queue 'peek))
((queue 'dequeue))
((queue 'enqueue) 4)
((queue 'dequeue))
((queue 'dequeue))
" localhost:8080


λ
λ
()
(1)
(2 1)
1
2
#f
3
#t
()
"a queue item"
"a queue item"
()
4

queue is empty     

curl --data "
;;; Lazy style programming
(define a (delay (begin (display \"now\") (+ 1 2 10))))
(display \"here\")
(force a)
(force (delay ((lambda (n) (+ 1 n)) 10)))
" localhost:8080
λ

13
11

curl --data "
(define (lazy-car l) (car l))
(define (lazy-cdr l) (force (cdr l)))
(define (lazy-sequence n next) 
  (cons (next n) (delay (lazy-sequence (next n) next))))

(define integers (lazy-sequence 0 (lambda (n) (+ n 1))))

(lazy-car integers)
(define ints1 (lazy-cdr integers))
(lazy-car ints1)
(define ints2 (lazy-cdr ints1))
(lazy-car ints2)
(define ints3 (lazy-cdr ints2))
(lazy-car ints3)

(define (take-reverse n l)
  (define (taker n l r)
    (cond 
      ((equal? n 0) r)
      (else (taker (- n 1) (lazy-cdr l) (cons (lazy-car l) r)))))
  (taker n l '()))
(reverse (take-reverse 10 integers))

(define (take n l)
  (define (taker n l)
    (cond 
      ((equal? n 0) '())
      (else (cons (lazy-car l) (taker (- n 1) (lazy-cdr l))))))
  (taker n l))
(take 100 integers)
" localhost:8080
λ
λ
λ
(1 . λ)
1
(2 . λ)
2
(3 . λ)
3
(4 . λ)
4
λ
(1 2 3 4 5 6 7 8 9 10)
λ
(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100)

curl --data "
(define (memorize f args)  
  (let 
    ((value '()))
    (lambda () 
      (if (null? value) 
        (begin (display \"...\") (set! value (apply f args)) value) 
        value))))
(define big-multiply (memorize * '(1000 1000)))
(big-multiply)
(big-multiply)
(force big-multiply)

(define (memorize-delay delay-exp)
  (let 
    ((value '()))
    (lambda () 
      (if (null? value) 
        (begin (display \"...\") (set! value (force delay-exp)) value) 
        value))))
(define big-multiply-delay (memorize-delay (delay (* 1000 1000 1000))))
(big-multiply-delay)
(big-multiply-delay)
(force big-multiply-delay)
" localhost:8080
λ
λ
1000000
1000000
1000000
λ
λ
1000000000
1000000000
1000000000
