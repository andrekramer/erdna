curl --data "(sleep-promise 2000)" localhost:8080
curl --data "(resolve (sleep-promise 2000))" localhost:8080
curl --data "
(define (test) 
  (define a (sleep-promise 2000)) 
  (+ 1 2) 
  (resolve a)) (test)" localhost:8080
# writes "done." after each sleep

# In another console:
export PORT=8081;node index.js 

# request some URLs:
curl --data '(resolve (fetch-promise "http://localhost:8081" ""))' localhost:8080
erdna
curl --data '(resolve (fetch-promise "http://github.com/andrekramer/erdna" ""))' localhost:8080
fetches the HTML page for this GitHub repo
curl --data '(resolve (fetch-promise "http://worldtimeapi.org/api/timezone/Europe/Dublin" ""))' localhost:8080  
time in Dublin

# evaluate an expression remotely
curl --data '(resolve (fetch-promise "http://localhost:8081" "" "(+ 1 2 3)"))' localhost:8080
"6\n"

curl --data "
(define (remote-promise url apikey exp) (fetch-promise url apikey (print exp)))
(resolve (remote-promise \"http://localhost:8081\" \"\" '(+ 1 2 3 4)))
" localhost:8080
"10\n"

curl --data "
(define (remote-promise url apikey exp) (fetch-promise url apikey (print exp)))
(resolve (remote-promise \"http://localhost:8081\" \"\"
'(begin (define add1 (lambda (b) (+ 1 b))) (add1 7))))
" localhost:8080
"8\n"

# Use api key XXX
export APIKEY=XXX; export PORT=8081; node --stack-size=1000000 index.js 
curl --data '(resolve (fetch-promise "http://localhost:8081" "XXX"))' localhost:8080
"erdna"

# read and eval the result from a remote promise:
curl --data "
(define (remote-value-promise url apikey exp) 
  (eval 
    (read 
      (resolve 
        (fetch-promise url apikey (print exp)))) 
    (lambda ()())))

(remote-value-promise \"http://localhost:8081\" \"\" 
  '(letrec
     ((add1 (lambda (b) (+ 1 b))) 
      (x (add1 7))
      (y (add1 1)))
      (quasiquote (+ ,x ,y 3))))
" localhost:8080
13

# background processing:
curl --data "(apply-promise (lambda (x y z) (display x) z) '(1 2 'a))" localhost:8080
a

curl --data "(begin (apply-promise (lambda (x y z) (display x) 
(resolve (sleep-promise 2000)) (display y) z) '(1 2 'a)) (display 3) 4)" localhost:8080 
4
displays:
3
1
2 

curl --data "
(define (resolve-all l) 
  (cond 
    ((null? l) '())
    (else (begin (display (resolve (car l))) (resolve-all (cdr l))))))
(resolve-all (list 
  (apply-promise (lambda (x y z) (display x) (resolve (sleep-promise 100)) (display y) z) '(1 2 3))
  (apply-promise (lambda (x y z) (display x) (resolve (sleep-promise 200)) (display y) z) '(4 5 6)) 
  (apply-promise (lambda (x y z) (display x) (resolve (sleep-promise 300)) (display y) z) '(7 8 9)) 
))" localhost:8080
displays:  
1
4
7
2
3
5
6
8
9

curl --data "(resolve (read-file-promise \"file1\"))"  localhost:8080
"coola boola\n"

curl --data "(resolve (write-file-promise \"file2\" \"hello erdna\"))"  localhost:8080
cat file2 
hello erdna 

# read a line from a prompt
curl --data "(let ((name (resolve (prompt-promise \"Hi, who are you? \")))) 
 (display (concat \"Hello, \" name))) " localhost:8080

