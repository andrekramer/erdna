curl --data "(sleep-promise 2000)" localhost:8080
curl --data "(resolve (sleep-promise 2000))" localhost:8080
curl --data "
(define (test) 
  (define a (sleep-promise 2000)) 
  (+ 1 2) 
  (resolve a)) (test)" localhost:8080
# writes "done." after each sleep

# In another console:
export PORT=8081;node index.js 

# request some URLs:
curl --data '(resolve (fetch-promise "http://localhost:8081" ""))' localhost:8080
erdna

curl --data '(resolve (fetch-promise "http://localhost:8081" "" "(+ 1 2 3)" ))' localhost:8080
"6\n"

curl --data "
(define (remote-promise url apikey exp) (fetch-promise url apikey (print exp)))
(resolve (remote-promise \"http://localhost:8081\" \"\" '(+ 1 2 3) ))
" localhost:8080
"6\n"

curl --data "
(define (remote-promise url apikey exp) (fetch-promise url apikey (print exp)))
(resolve (remote-promise \"http://localhost:8081\" \"\"
'(begin (define add1 (lambda (b) (+ 1 b))) (add1 7) )))
" localhost:8080
"8\n"

# Use api key XXX (can use different keys for each hop) 
export APIKEY=XXX; node --stack-size=1000000 index.js 
curl --data '(resolve (fetch-promise "http://localhost:8081" "XXX"))' localhost:8080

# read and eval the result from a remote promise:
curl --data "
(define (remote-promise url apikey exp) (fetch-promise url apikey (print exp)))
(eval (read 
   (resolve 
     (remote-promise \"http://localhost:8081\" \"\"
       '(letrec
          ((add1 (lambda (b) (+ 1 b))) 
           (x (add1 7))
           (y (add1 1)) )
          (quasiquote (+ ,x ,y 3))
      )))) 
      (lambda ()()))     
" localhost:8080
13

# background processing:
curl --data "(apply-promise (lambda (x y z) (display x) z) '(1 2 'a))" localhost:8080
a

curl --data "(begin (apply-promise (lambda (x y z) (display x) (resolve (sleep-promise 2000)) (display y) z) '(1 2 'a)) (display 3) 4)" localhost:8080 
4
displays:
3
1
2 

