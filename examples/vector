# the '#(1 2 3) syntax for vector literals is not implemented. 
# Can use list->vector (below) instead.

curl --data-raw "
(define v (make-vector 1))
(vector-set! v 0 1)
(vector-ref v 0)
(define v2 (make-vector 10 0))
(vector-ref v2 1)
(vector-set! v2 1 100)
(vector-ref v2 1)
(define v3 (make-vector 1000 'a))
(vector-set! v3 100 'b)
(vector-set! v3 101 'c)
(vector-ref v3 99)
(vector-ref v3 100)
(vector-ref v3 101)
(equal? v v)
(equal? v v2)
(define v4 (make-vector 32 0))
(define v5 (vector 32 0))
(equal? v4 v5)
(vector-set! v4 16 1)
(equal? v4 v5)
" localhost:8080

vector

1
vector
0

100
vector


a
b
c
#t
#f
vector
vector
#t

#f

curl --data-raw "
(define v4 (make-vector 100))
(define v5 (vector 100))
(equal? v4 v5)
(vector-set! v4 99 'different)
(equal? v4 v5)
" localhost:8080

vector
vector
#t

#f

curl --data-raw "
(define (list->vector l) 
  (let 
    ((v (make-vector (length l))))
    (define (fill l n)
      (cond
        ((null? l) v)
        (else 
          (vector-set! v n (car l))
          (fill (cdr l) (+ n 1)))
      )
    )
    (fill l 0)
  ))
(define (vector->list v) 
  (define (fill i l) 
    (cond ((equal? i 0) l)
          (else (fill (- i 1) (cons (vector-ref v (- i 1)) l)))))
  (fill (vector-length v) '()))
(define (random-int max) (floor (* (random) max)))

(define v (list->vector '(a b c)))
(vector-ref v 0)
(vector-ref v 1)
(vector-ref v 2)
(random-int 52)
(vector-length v)
(vector->list v)
" localhost:8080
λ
λ
vector
a
b
c
0 to 51
3
(a b c)

curl --data-raw "
(define (card-list)
  (reduce append  
          (map (lambda (suit) (map (lambda (rank) (cons suit rank))
				   '(a 2 3 4 5 6 7 8 9 10 j q k)))
	       '(h s d c)) '()))

(card-list)

(define (make-deck)
  (shuffle! (list->vector (card-list)) 51))

(define (shuffle! deck index)
  (if (< index 0)
      deck
      (begin (vector-swap! deck index (random-int (+ index 1)))
	     (shuffle! deck (- index 1)))))

(define (vector-swap! vector index1 index2)
  (let ((temp (vector-ref vector index1)))
    (vector-set! vector index1 (vector-ref vector index2))
    (vector-set! vector index2 temp)))

(vector->list (make-deck))

" localhost:8080
λ
((h . a) (h . 2) (h . 3) (h . 4) (h . 5) (h . 6) (h . 7) (h . 8) (h . 9) (h . 10) (h . j) (h . q) (h . k) (s . a) (s . 2) (s . 3) (s . 4) (s . 5) (s . 6) (s . 7) (s . 8) (s . 9) (s . 10) (s . j) (s . q) (s . k) (d . a) (d . 2) (d . 3) (d . 4) (d . 5) (d . 6) (d . 7) (d . 8) (d . 9) (d . 10) (d . j) (d . q) (d . k) (c . a) (c . 2) (c . 3) (c . 4) (c . 5) (c . 6) (c . 7) (c . 8) (c . 9) (c . 10) (c . j) (c . q) (c . k))
λ
λ
λ
((c . 5) (s . 8) (c . k) (s . 5) (h . k) (c . q) (s . 4) (d . 10) (c . a) (c . 2) (s . k) (c . 7) (s . a) (h . 5) (h . a) (d . k) (d . 7) (h . 2) (s . q) (s . 3) (d . 4) (h . 7) (h . 9) (d . j) (h . 6) (s . 6) (d . 5) (c . 6) (d . a) (s . j) (h . 4) (s . 10) (s . 2) (s . 9) (d . 3) (h . 10) (d . 2) (h . 3) (h . q) (c . 8) (h . j) (d . q) (c . 10) (c . 9) (c . 3) (d . 8) (c . j) (s . 7) (h . 8) (d . 6) (d . 9) (c . 4))

curl --data-raw "
(define v (make-byte-vector 1))
(byte-vector-set! v 0 1)
(byte-vector-ref v 0)
(define v2 (make-byte-vector 10 0))
(byte-vector-ref v2 1)
(byte-vector-set! v2 1 100)
(byte-vector-ref v2 1)
(define v3 (make-byte-vector 1000 1))
(byte-vector-set! v3 100 2)
(byte-vector-set! v3 101 3)
(byte-vector-ref v3 99)
(byte-vector-ref v3 100)
(byte-vector-ref v3 101)
(equal? v v)
(equal? v v2)
(define v4 (make-byte-vector 32 0))
(define v5 (byte-vector 32 0))
(equal? v4 v5)
(byte-vector-set! v4 16 1)
(equal? v4 v5)
" localhost:8080

byte-vector

1
byte-vector
0

100
byte-vector


1
2
3
#t
#f
byte-vector
byte-vector
#t

#f

curl --data-raw "
(define v4 (make-byte-vector 100))
(define v5 (byte-vector 100))
(equal? v4 v5)
(byte-vector-set! v4 99 1)
(equal? v4 v5)
" localhost:8080

byte-vector
byte-vector
#t

#f
